import tkinter as tk
from tkinter import messagebox, font
import random

class LotteryApp:
    def __init__(self, root):
        self.root = root
        root.title("Lottery — Game Mode")
        root.resizable(False, False)

        self.numbers = []
        self.running_anim = False

        main_frame = tk.Frame(root, padx=12, pady=12, bg="#1b1b1b")
        main_frame.pack()

        left = tk.Frame(main_frame, bg="#1b1b1b")
        left.grid(row=0, column=0, sticky="n")
        right = tk.Frame(main_frame, bg="#1b1b1b")
        right.grid(row=0, column=1, padx=(12,0), sticky="n")

        tk.Label(left, text="Number of participants:", fg="#eee", bg="#1b1b1b").pack(anchor="w")
        self.entry = tk.Entry(left, width=8, font=("Segoe UI", 12))
        self.entry.pack(anchor="w", pady=(4,8))
        self.entry.insert(0, "10")

        btn_frame = tk.Frame(left, bg="#1b1b1b")
        btn_frame.pack(fill="x", pady=(0,6))
        self.start_btn = tk.Button(btn_frame, text="Start", width=10, command=self.start_lottery)
        self.start_btn.pack(side="left")
        self.draw_btn = tk.Button(btn_frame, text="Draw", width=8, state="disabled", command=self.draw)
        self.draw_btn.pack(side="left", padx=6)
        self.reset_btn = tk.Button(btn_frame, text="Reset", width=8, state="disabled", command=self.reset)
        self.reset_btn.pack(side="left")

        self.status = tk.Label(left, text="Enter participants and press Start.", fg="#ccc", bg="#1b1b1b")
        self.status.pack(anchor="w", pady=(6,0))

        # canvas for big visual
        self.canvas = tk.Canvas(right, width=440, height=300, bg="#0f1720", bd=0, highlightthickness=0)
        self.canvas.pack()
        self.big_font = font.Font(family="Segoe UI", size=64, weight="bold")
        self.small_font = font.Font(family="Segoe UI", size=12)

        # side panel: remaining numbers
        tk.Label(left, text="Remaining:", fg="#eee", bg="#1b1b1b").pack(anchor="w", pady=(10,0))
        self.remain_list = tk.Listbox(left, height=12, width=12, activestyle="none")
        self.remain_list.pack(anchor="w", pady=(4,0))
        self.remain_list.configure(font=("Consolas", 12))

        # decorative initial canvas
        self.canvas.create_text(220, 150, text="Ready", fill="#7dd3fc", font=self.big_font, tags="display")

        # confetti storage
        self.confetti = []

    def start_lottery(self):
        if self.running_anim:
            return
        try:
            n = int(self.entry.get())
            if n <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("Invalid", "Please enter a positive integer.")
            return

        self.numbers = list(range(1, n + 1))
        random.shuffle(self.numbers)
        self._refresh_remaining()
        self.start_btn.config(state="disabled")
        self.entry.config(state="disabled")
        self.draw_btn.config(state="normal")
        self.reset_btn.config(state="normal")
        self.update_status()
        self._show_center_text("Good luck!", color="#7dd3fc")

    def draw(self):
        if self.running_anim or not self.numbers:
            return
        self.running_anim = True
        self.draw_btn.config(state="disabled")
        spinner_cycles = 22
        spin_delay = 50
        self._spin_count = 0

        x0, y0 = 220, 150
        radius = 80

        self.canvas.delete("all")
        # use solid color (Tkinter doesn't support alpha in hex)
        ring = self.canvas.create_oval(x0-radius-6, y0-radius-6, x0+radius+6, y0+radius+6, outline="#ffffff", width=4, tags="ring")
        ball = self.canvas.create_oval(x0-30, y0-30, x0+30, y0+30, fill="#ffd166", outline="#ffffff", width=2, tags="ball")
        number_text = self.canvas.create_text(x0, y0, text="", fill="#072a2a", font=self.big_font, tags="num")
        prompt = self.canvas.create_text(x0, y0+120, text="Drawing...", fill="#cbd5e1", font=self.small_font, tags="prompt")

        def spin():
            if self._spin_count < spinner_cycles:
                candidate = random.choice(self.numbers)
                self.canvas.itemconfig(number_text, text=str(candidate), fill="#072a2a")
                # gentle wobble to simulate motion
                self.canvas.move(ball, random.randint(-6,6), random.randint(-4,4))
                self.canvas.move(number_text, random.randint(-6,6), random.randint(-4,4))
                self._spin_count += 1
                self.root.after(spin_delay, spin)
            else:
                picked = self.numbers.pop(0)
                self._refresh_remaining()
                self.canvas.itemconfig(number_text, text=str(picked), fill="#050505")
                self.canvas.coords(ball, x0-90, y0-90, x0+90, y0+90)
                self.canvas.itemconfig(ring, outline="#ffffff")
                self.canvas.itemconfig(prompt, text="Winner!")
                self.update_status(picked)
                self._explode_confetti()
                self.running_anim = False
                if self.numbers:
                    self.draw_btn.config(state="normal")
                else:
                    self.draw_btn.config(state="disabled")
                    self.status.config(text="All participants picked. Lottery complete.")
                self.root.after(400, lambda: messagebox.showinfo("Winner", f"Picked: {picked}"))
        spin()

    def reset(self):
        if self.running_anim:
            return
        self.numbers = []
        self.start_btn.config(state="normal")
        self.entry.config(state="normal")
        self.draw_btn.config(state="disabled")
        self.reset_btn.config(state="disabled")
        self.status.config(text="Reset. Enter participants and press Start.")
        self.remain_list.delete(0, tk.END)
        self.canvas.delete("all")
        self.canvas.create_text(220, 150, text="Ready", fill="#7dd3fc", font=self.big_font, tags="display")

    def update_status(self, last_picked=None):
        if last_picked is None:
            self.status.config(text=f"{len(self.numbers)} participants ready.")
        else:
            self.status.config(text=f"Picked: {last_picked} — {len(self.numbers)} remaining.")

    def _refresh_remaining(self):
        self.remain_list.delete(0, tk.END)
        for num in self.numbers:
            self.remain_list.insert(tk.END, str(num))

    def _show_center_text(self, text, color="#fff"):
        self.canvas.delete("all")
        self.canvas.create_text(220, 150, text=text, fill=color, font=self.big_font, tags="display")

    def _explode_confetti(self):
        colors = ["#f97316", "#ef4444", "#f59e0b", "#10b981", "#60a5fa", "#a78bfa", "#ec4899"]
        self.confetti.clear()
        for i in range(30):
            x = random.randint(80, 360)
            y = random.randint(20, 120)
            size = random.randint(6, 12)
            color = random.choice(colors)
            speed_x = random.uniform(-2.5, 2.5)
            speed_y = random.uniform(1.2, 4.0)
            item = self.canvas.create_rectangle(x, y, x+size, y+size, fill=color, outline="")
            self.confetti.append([item, speed_x, speed_y])
        self._animate_confetti()

    def _animate_confetti(self):
        alive = False
        for piece in list(self.confetti):
            item, sx, sy = piece
            if not self.canvas.coords(item):
                continue
            alive = True
            self.canvas.move(item, sx, sy)
            piece[1] += random.uniform(-0.15, 0.15)
            piece[2-2] = piece[1] if len(piece) < 3 else piece[1]  # harmless no-op to keep structure simple
            x1, y1, x2, y2 = self.canvas.coords(item)
            if y1 > 300:
                try:
                    self.canvas.delete(item)
                except Exception:
                    pass
                try:
                    self.confetti.remove(piece)
                except ValueError:
                    pass
        if alive:
            self.root.after(30, self._animate_confetti)

def main():
    root = tk.Tk()
    app = LotteryApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
  
